name: deploy-staging

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy (e.g., dev-<sha> or latest)"
        required: false
        type: string
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'ops/**'
      - '.github/workflows/deploy-staging.yml'
      - 'frontend/**'
      - 'users-api/**'
      - 'auth-api/**'
      - 'todos-api/**'
      - 'log-message-processor/**'
  push:
    branches: [ develop ]
    paths:
      - 'ops/**'
      - '.github/workflows/deploy-staging.yml'
      - 'frontend/**'
      - 'users-api/**'
      - 'auth-api/**'
      - 'todos-api/**'
      - 'log-message-processor/**'

concurrency:
  group: deploy-staging-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Resolve desired IMAGE_TAG
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ inputs.image_tag }}" ]; then
              echo "IMAGE_TAG=${{ inputs.image_tag }}" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=latest" >> $GITHUB_ENV
            fi
          else
            echo "IMAGE_TAG=dev-${GITHUB_SHA}" >> $GITHUB_ENV
          fi
          echo "Using desired IMAGE_TAG=${IMAGE_TAG}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Decide FINAL_TAG (fallback to latest if any image missing)
        id: decide
        env:
          USER: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          set -e
          SERVICES="frontend users-api todos-api auth-api log-message-processor"
          MISSING=""
          for SVC in $SERVICES; do
            if ! docker manifest inspect "${USER}/${SVC}:${IMAGE_TAG}" >/dev/null 2>&1; then
              echo "Missing ${USER}/${SVC}:${IMAGE_TAG}"
              MISSING="yes"
            else
              echo "Found ${USER}/${SVC}:${IMAGE_TAG}"
            fi
          done
          if [ -n "$MISSING" ]; then
            echo "FINAL_TAG=latest" >> $GITHUB_ENV
            {
              echo "### Image fallback"
              echo ""
              echo "Some images with tag \`${IMAGE_TAG}\` were missing. Falling back to \`latest\` for all services."
            } >> $GITHUB_STEP_SUMMARY
          else
            echo "FINAL_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          fi
          echo "FINAL_TAG=${FINAL_TAG:-latest}"

      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint
          ansible-galaxy collection install community.docker

      - name: Add SSH key (staging)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Preflight TCP 22 (staging)
        shell: bash
        run: |
          set -e
          echo "Probing port 22..."
          timeout 8 bash -lc 'echo > /dev/tcp/${{ secrets.SSH_HOST }}/22' \
            && echo "OK port 22" || (echo "Port 22 unreachable"; exit 1)

      - name: Connectivity check (appleboy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10s
          script_stop: true
          script: echo ok

      - name: Deploy with Ansible (staging)
        env:
          # ✅ Evita el callback deprecated y muestra YAML con el plugin builtin
          ANSIBLE_STDOUT_CALLBACK: "default"
          ANSIBLE_CALLBACK_RESULT_FORMAT: "yaml"
          ANSIBLE_HOST_KEY_CHECKING: "False"

          # App vars
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_TAG: ${{ env.FINAL_TAG }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

          # ✅ Clave: saltar bootstrap (APT/Docker) para que no se cuelgue
          SKIP_BOOTSTRAP: "true"
        run: |
          ansible-playbook -vv -i ops/ansible/inventory/hosts.ini ops/ansible/playbooks/deploy.yml -l staging
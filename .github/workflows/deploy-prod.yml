name: deploy-prod

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy (e.g. v1.0.0 or latest)'
        required: true
        default: 'latest'
  push:
    branches: [ main ]
    paths:
      - 'ops/**'
      - '.github/workflows/deploy-prod.yml'
      - 'frontend/**'
      - 'users-api/**'
      - 'auth-api/**'
      - 'todos-api/**'
      - 'log-message-processor/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Instalar Ansible y colección Docker
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint
          ansible-galaxy collection install community.docker

      - name: Agregar clave SSH (ENV production)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Comprobar conectividad
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo ok'

      - name: Despliegue con Ansible (production)
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_TAG: ${{ github.event_name == 'workflow_dispatch' && inputs.image_tag || 'latest' }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          ansible-playbook -vv -i ops/ansible/inventory/hosts.ini ops/ansible/playbooks/deploy.yml -l production

                  - name: Smoke test (production)
                    uses: appleboy/ssh-action@v1.0.3
                    with:
                      host: ${{ secrets.SSH_HOST }}
                      username: ${{ secrets.SSH_USER }}
                      key: ${{ secrets.SSH_PRIVATE_KEY }}
                      script: |
                        set -e
                        cd /opt/microservice-app

                        test -f docker-compose.prod.yml || { echo "FALTA /opt/microservice-app/docker-compose.prod.yml"; ls -la; exit 1; }

                        JWT_SECRET=$(grep -E '^JWT_SECRET=' .env | cut -d= -f2-)
                        [ -n "$JWT_SECRET" ] || { echo "Falta JWT_SECRET en .env"; exit 1; }
                        TOKEN=$(env SECRET="$JWT_SECRET" python3 -c 'import os,json,base64,hmac,hashlib,time,base64 as b64
            def b64url(x): return b64.urlsafe_b64encode(x).rstrip(b"=").decode()
            now=int(time.time())
            h={"alg":"HS256","typ":"JWT"}
            p={"sub":"demo","name":"Demo User","iat":now,"nbf":now-5,"exp":now+3600,"roles":["USER"]}
            sec=os.environ["SECRET"].encode()
            hdr=b64url(json.dumps(h,separators=(",",":")).encode())
            pld=b64url(json.dumps(p,separators=(",",":")).encode())
            sig=b64url(hmac.new(sec, (hdr+"."+pld).encode(), hashlib.sha256).digest())
            print(hdr+"."+pld+"."+sig)')

                        ok=0
                        for i in $(seq 1 40); do
                          if curl -sf -H "Authorization: Bearer ${TOKEN}" http://localhost:8083/users/actuator/health | grep -q '"status":"UP"'; then
                            echo "users-api UP"; ok=1; break
                          fi
                          echo "esperando users-api... ($i/40)"; sleep 3
                        done
                        [ "$ok" = "1" ] || { echo "users-api no subió a tiempo"; exit 1; }

                        CODE_ROOT=$(curl -sS -o /dev/null -w "%{http_code}" http://localhost/)
                        CODE_USERS=$(curl -sS -H "Authorization: Bearer ${TOKEN}" -o /dev/null -w "%{http_code}" http://localhost/api/users/)
                        CODE_TODOS=$(curl -sS -H "Authorization: Bearer ${TOKEN}" -o /dev/null -w "%{http_code}" http://localhost/api/todos/)

                        echo "/ -> $CODE_ROOT | /api/users -> $CODE_USERS | /api/todos -> $CODE_TODOS"
                        [ "$CODE_USERS" = "200" ] && [ "$CODE_TODOS" = "200" ]

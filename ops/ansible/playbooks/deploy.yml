---
- name: "Deploy microservice-app (auto: staging/prod)"
  hosts: all
  become: true
  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:
    deploy_user: "{{ ansible_user | default('ubuntu') }}"
    app_dir: "{{ '/opt/microservice-app-stg' if 'staging' in group_names else '/opt/microservice-app' }}"
    compose_file: "{{ 'docker-compose.staging.yml' if 'staging' in group_names else 'docker-compose.prod.yml' }}"
    compose_src_dir: "{{ playbook_dir }}/../../compose"
    base_url: "{{ 'http://localhost:8080' if 'staging' in group_names else 'http://localhost' }}"
    # ðŸ‘‡ Flag para forzar saltar bootstrap desde el pipeline (opcional)
    skip_bootstrap: "{{ (lookup('env','SKIP_BOOTSTRAP') | default('false')) | bool }}"

  handlers:
    - name: reload nginx
      ansible.builtin.command: >
        docker compose --env-file ./.env -f {{ compose_file }} up -d --no-deps nginx
      args:
        chdir: "{{ app_dir }}"

  tasks:
    # --------- DetecciÃ³n temprana de Docker para evitar APT lentos ----------
    - name: Check if Docker is already installed
      ansible.builtin.command: docker --version
      register: docker_check
      changed_when: false
      ignore_errors: true

    - name: Set docker_installed fact
      ansible.builtin.set_fact:
        docker_installed: "{{ docker_check.rc == 0 }}"

    # ---------- Esperar locks de apt (solo si vamos a bootstrapped) ----------
    - name: Wait for APT/dpkg locks if in use
      ansible.builtin.shell: |
        set -e
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 3; done
        while fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 3; done
      changed_when: false
      when: not skip_bootstrap and not docker_installed

    # ---------- Prerrequisitos Docker (condicionales) ----------
    - name: Install base packages
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - python3
        state: present
        update_cache: yes
      register: apt_base
      retries: 5
      delay: 5
      until: apt_base is succeeded
      when: not skip_bootstrap and not docker_installed

    - name: Ensure keyrings dir
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: not skip_bootstrap and not docker_installed

    - name: Download Docker GPG (ASCII)
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        force: true
      when: not skip_bootstrap and not docker_installed

    - name: Dearmor Docker GPG
      ansible.builtin.command: >
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.gpg
      when: not skip_bootstrap and not docker_installed

    - name: Add Docker repo (deb822)
      ansible.builtin.deb822_repository:
        name: docker
        types: [deb]
        uris: https://download.docker.com/linux/{{ ansible_distribution | lower }}
        suites: "{{ ansible_distribution_release }}"
        components: [stable]
        signed_by: /etc/apt/keyrings/docker.gpg
        state: present
      when: not skip_bootstrap and not docker_installed

    - name: Install Docker Engine & Compose v2
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      register: apt_docker
      retries: 5
      delay: 5
      until: apt_docker is succeeded
      when: not skip_bootstrap and not docker_installed

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ deploy_user }}"
        groups: docker
        append: yes
      when: not skip_bootstrap and not docker_installed

    # ---------- Despliegue ----------
    - name: Ensure app dir
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"

    - name: Capture JWT_SECRET from runner env
      ansible.builtin.set_fact:
        jwt_secret_from_env: "{{ lookup('env','JWT_SECRET') | default('', true) }}"

    - name: Assert JWT_SECRET is present
      ansible.builtin.assert:
        that:
          - jwt_secret_from_env | length > 0
        fail_msg: "JWT_SECRET is missing in CI env."

    - name: Render .env from template
      ansible.builtin.template:
        src: "{{ compose_src_dir }}/env.j2"
        dest: "{{ app_dir }}/.env"
        mode: '0640'
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
      vars:
        dockerhub_user: "{{ lookup('env','DOCKERHUB_USER') }}"
        image_tag: "{{ lookup('env','IMAGE_TAG') | default('latest', true) }}"
        jwt_secret: "{{ jwt_secret_from_env }}"
        frontend_port:    "{{ 8080 if 'staging' in group_names else 9080 }}"
        users_api_port:   "{{ 8083 if 'staging' in group_names else 9083 }}"
        todos_api_port:   "{{ 8082 if 'staging' in group_names else 9082 }}"
        auth_api_port:    "{{ 8081 if 'staging' in group_names else 9081 }}"
        nginx_http_port:  "{{ 8080 if 'staging' in group_names else 80 }}"
        redis_port:       "{{ 6379 if 'staging' in group_names else 6479 }}"

    - name: Copy docker-compose file
      ansible.builtin.copy:
        src: "{{ compose_src_dir }}/{{ compose_file }}"
        dest: "{{ app_dir }}/{{ compose_file }}"
        mode: '0644'
        owner: root
        group: root

    - name: Copy nginx.conf
      ansible.builtin.copy:
        src: "{{ compose_src_dir }}/nginx.conf"
        dest: "{{ app_dir }}/nginx.conf"
        mode: '0644'
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
      notify: reload nginx

    # --- compose up ---
    - name: "Tear down existing stack (ignore if first time)"
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files: ["{{ compose_file }}"]
        project_name: "{{ 'microservice-app-stg' if 'staging' in group_names else 'microservice-app' }}"
        state: absent
      ignore_errors: true

    - name: "Up stack (pull: always)"
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files: ["{{ compose_file }}"]
        project_name: "{{ 'microservice-app-stg' if 'staging' in group_names else 'microservice-app' }}"
        pull: always
        state: present
        remove_orphans: true


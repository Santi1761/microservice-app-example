---
- name: Deploy microservice-app (auto: staging/prod)
  hosts: all
  become: true
  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:
    deploy_user: "{{ ansible_user | default('ubuntu') }}"
    app_dir: "{{ '/opt/microservice-app-stg' if 'staging' in group_names else '/opt/microservice-app' }}"
    compose_file: "{{ 'docker-compose.staging.yml' if 'staging' in group_names else 'docker-compose.prod.yml' }}"
    compose_src_dir: "{{ playbook_dir }}/../../compose"

  tasks:
    # ---- APT lock waiters (no borramos locks a lo loco) ----
    - name: Wait for APT/dpkg locks if in use
      ansible.builtin.shell: |
        set -e
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 3; done
        while fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 3; done
      changed_when: false

    # ---- Docker prerequisites ----
    - name: Base packages
      ansible.builtin.apt:
        name: [ca-certificates, curl, gnupg, python3]
        state: present
        update_cache: yes
        force_apt_get: yes
      register: apt_base
      retries: 5
      delay: 5
      until: apt_base is succeeded

    - name: Ensure keyrings dir
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Fetch Docker GPG (ASCII)
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        force: true

    - name: Dearmor GPG
      ansible.builtin.command: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repo (deb822)
      ansible.builtin.deb822_repository:
        name: docker
        types: [deb]
        uris: https://download.docker.com/linux/{{ ansible_distribution | lower }}
        suites: "{{ ansible_distribution_release }}"
        components: [stable]
        signed_by: /etc/apt/keyrings/docker.gpg
        state: present

    - name: APT timeouts/retries
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/99ansible-timeouts
        mode: '0644'
        content: |
          Acquire::http::Timeout "10";
          Acquire::https::Timeout "10";
          Acquire::ftp::Timeout "10";
          Acquire::Retries "3";
          Acquire::http::Pipeline-Depth "0";

    - name: Install Docker Engine + Buildx + Compose v2
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
        force_apt_get: yes
      register: apt_docker
      retries: 5
      delay: 5
      until: apt_docker is succeeded

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ deploy_user }}"
        groups: docker
        append: yes

    # ---- Layout target dir ----
    - name: Create app dir
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"

    # ---- Secrets and env ----
    - name: Capture JWT_SECRET from runner env
      ansible.builtin.set_fact:
        jwt_secret_from_env: "{{ lookup('env','JWT_SECRET') | default('', true) }}"

    - name: Assert JWT_SECRET present
      ansible.builtin.assert:
        that:
          - jwt_secret_from_env | length > 0
        fail_msg: "JWT_SECRET missing in runner env (set it in repo/org secrets)."

    - name: Render .env from template
      ansible.builtin.template:
        src: "{{ compose_src_dir }}/env.j2"
        dest: "{{ app_dir }}/.env"
        mode: '0640'
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
      vars:
        dockerhub_user: "{{ lookup('env','DOCKERHUB_USER') }}"
        image_tag: "{{ lookup('env','IMAGE_TAG') }}"
        jwt_secret: "{{ jwt_secret_from_env }}"

    - name: Copy docker-compose file
      ansible.builtin.copy:
        src: "{{ compose_src_dir }}/{{ compose_file }}"
        dest: "{{ app_dir }}/{{ compose_file }}"
        mode: '0644'
        owner: root
        group: root

    - name: Copy nginx.conf
      ansible.builtin.copy:
        src: "{{ compose_src_dir }}/nginx.conf"
        dest: "{{ app_dir }}/nginx.conf"
        mode: '0644'
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"

    # ---- Compose deploy (down/up) ----
    - name: Tear down existing stack (ignore if first time)
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files:
          - "{{ compose_file }}"
        state: absent
      ignore_errors: true

    - name: Pull and start stack (pull: always)
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files:
          - "{{ compose_file }}"
        pull: always
        state: present
        remove_orphans: true
      register: compose_up

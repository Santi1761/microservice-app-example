---
- name: Despliegue microservice-app (staging/prod auto)
  hosts: all
  become: true
  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:
    app_dir: "{{ '/opt/microservice-app-stg' if 'staging' in group_names else '/opt/microservice-app' }}"
    compose_file: "{{ 'docker-compose.staging.yml' if 'staging' in group_names else 'docker-compose.prod.yml' }}"
    compose_src_dir: "{{ playbook_dir }}/../../compose"
    base_url: "{{ 'http://localhost:8080' if 'staging' in group_names else 'http://localhost' }}"
    users_health_url: "http://localhost:8083/users/actuator/health"

  tasks:
    # ---------- Esperar locks de apt ----------
    - name: Esperar locks de APT/dpkg si están en uso
      ansible.builtin.shell: |
        set -e
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 3; done
        while fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 3; done
      changed_when: false

    # ---------- Prerrequisitos Docker ----------
    - name: Paquetes base
      ansible.builtin.apt:
        name: ['ca-certificates','curl','gnupg','python3']
        state: present
        update_cache: yes
        cache_valid_time: 3600
        force_apt_get: yes

    - name: Crear carpeta de keyrings
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Descargar llave GPG de Docker (ASCII)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        force: true

    - name: Convertir llave a formato gpg (dearmor)
      ansible.builtin.command: >
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Agregar repo de Docker (deb822)
      ansible.builtin.deb822_repository:
        name: docker
        types: [deb]
        uris: https://download.docker.com/linux/ubuntu
        suites: "{{ ansible_distribution_release }}"
        components: [stable]
        signed_by: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Actualizar cache APT
      ansible.builtin.apt:
        update_cache: yes
        force_apt_get: yes

    - name: Instalar Docker Engine, Buildx y Compose
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        force_apt_get: yes

    - name: Agregar usuario ubuntu al grupo docker
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: yes

    # ---------- Despliegue ----------
    - name: INFO | Host en grupos / paths seleccionados
      ansible.builtin.debug:
        msg: "group_names={{ group_names }} | app_dir={{ app_dir }} | compose={{ compose_file }}"

    - name: Crear directorio de la app
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: ubuntu
        group: ubuntu

    - name: Render .env desde plantilla
      ansible.builtin.template:
        src: "{{ compose_src_dir }}/env.j2"
        dest: "{{ app_dir }}/.env"
        mode: '0640'
        owner: ubuntu
        group: ubuntu
      vars:
        dockerhub_user: "{{ lookup('env','DOCKERHUB_USER') }}"
        image_tag: "{{ lookup('env','IMAGE_TAG') }}"
        jwt_secret: "{{ lookup('env','JWT_SECRET') }}"

    - name: Copiar docker-compose según entorno (stg/prod)
      ansible.builtin.copy:
        src: "{{ compose_src_dir }}/{{ compose_file }}"
        dest: "{{ app_dir }}/{{ compose_file }}"
        mode: '0644'

    - name: Copiar nginx.conf
      ansible.builtin.copy:
        src: "{{ compose_src_dir }}/nginx.conf"
        dest: "{{ app_dir }}/nginx.conf"
        mode: '0644'
        owner: ubuntu
        group: ubuntu

    - name: Levantar stack con Docker Compose v2 (pull+up)
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files:
          - "{{ compose_file }}"
        pull: always
        state: present
        remove_orphans: true
      register: compose_up

    # ---------- Smoke básico raíz por Nginx ----------
    - name: Smoke GET /
      ansible.builtin.uri:
        url: "{{ base_url }}/"
        return_content: no
        status_code: 200
      register: smoke_root
      failed_when: smoke_root.status != 200

    # ---------- JWT y health protegido en users-api ----------
    - name: Leer .env para extraer JWT_SECRET
      ansible.builtin.slurp:
        src: "{{ app_dir }}/.env"
      register: env_slurp

    - name: Setear jwt_secret
      ansible.builtin.set_fact:
        jwt_secret: >-
          {{ (env_slurp.content | b64decode).splitlines()
             | select('match','^JWT_SECRET=')
             | first | regex_replace('^JWT_SECRET=','') }}

    - name: Generar JWT en remoto
      ansible.builtin.command:
        cmd: >
          python3 -c "import os,json,base64,hmac,hashlib,time,base64 as b64;
          b=lambda x: base64.urlsafe_b64encode(x).rstrip(b'=');
          now=int(time.time());
          h={'alg':'HS256','typ':'JWT'};
          p={'sub':'demo','name':'Demo User','iat':now,'nbf':now-5,'exp':now+3600,'roles':['USER']};
          sec=os.environ['SECRET'].encode();
          import json as J;
          hdr=b(J.dumps(h,separators=(',',':')).encode());
          pld=b(J.dumps(p,separators=(',',':')).encode());
          sig=b(hmac.new(sec, hdr+b'.'+pld, hashlib.sha256).digest());
          print((hdr+b'.'+pld+b'.'+sig).decode())"
      environment:
        SECRET: "{{ jwt_secret }}"
      register: jwt_token

    - name: Esperar a users-api UP (actuator con Authorization)
      ansible.builtin.uri:
        url: "{{ users_health_url }}"
        headers:
          Authorization: "Bearer {{ jwt_token.stdout }}"
        return_content: yes
        status_code: 200
      register: users_health
      until: users_health.status == 200 and
             (users_health.json is defined and users_health.json.status is defined and users_health.json.status == 'UP')
      retries: 40
      delay: 3

    # ---------- Endpoints a través de Nginx (con Authorization) ----------
    - name: Smoke /api/users/ via Nginx
      ansible.builtin.uri:
        url: "{{ base_url }}/api/users/"
        headers:
          Authorization: "Bearer {{ jwt_token.stdout }}"
        return_content: no
        status_code: 200
      register: smoke_users
      failed_when: smoke_users.status != 200

    - name: Smoke /api/todos/ via Nginx
      ansible.builtin.uri:
        url: "{{ base_url }}/api/todos/"
        headers:
          Authorization: "Bearer {{ jwt_token.stdout }}"
        return_content: no
        status_code: 200
      register: smoke_todos
      failed_when: smoke_todos.status != 200
